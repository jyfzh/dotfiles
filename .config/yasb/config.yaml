bars:
  yasb-bar:
    enabled: true
    screens: ['*']
    class_name: "bar"
    alignment:
      position: "top"
      center: true
    blur_effect:
      enabled: false
      acrylic: false
      dark: true
    window_flags:
      always_on_top: true
      windows_app_bar: true
    dimensions:
      width: "100%"
      height: 32
    padding:
      top: 0
      left: 0
      bottom: 0
      right: 0
    widgets:
      left:   [
        memory-widget,
        cpu-widget,
        # komorebi_active_layout,
        # komorebi_workspaces,
        # active-window-widget
      ]
      center: [
        clock-widget
      ]
      right:  [
        wakatime-widget,
        weather-widget,
        battery-widget
      ]

widgets:
  clock-widget:
    type: "yasb.clock.ClockWidget"
    options:
      label: "{%H:%M:%S %Z}"
      label_alt: "{%Y/%m/%d %H:%M:%S %Z}"
      update_interval: 1000
      timezones: ["Asia/Shanghai","UTC"]
      callbacks:
        on_left: "next_timezone"
        on_middle: "exec timedate"
        on_right: "toggle_label"

  cpu-widget:
    type: "yasb.cpu.CpuWidget"
    options:
      label: "\uf200 {info[histograms][cores]}"
        # ^ The format label for the widget. Accepts: string containing any of the below format options
        # {info[cores][physical]} - The total number of physical cores available to the system
        # {info[cores][total]} - The total number of cores available to the system
        # {info[freq][min]} - The minimum possible frequency of the CPU
        # {info[freq][max]} - The maximum possible frequency of the CPU
        # {info[freq][current]} - The current frequency of the CPU
        # {info[stats][context_switches]} - The number of context switches performed since boot
        # {info[stats][interrupts] -  The number of interrupts performed since boot
        # {info[stats][soft_interrupts] - The number of soft interrupts performed since boot
        # {info[stats][sys_calls] - The number of system calls performed since boot
        # {info[histograms][cpu_freq] - A unicode histogram representation of the lat N CPU frequency readings
        # {info[histograms][cpu_percent] - A unicode histogram representation of the last N CPU percent readings
        # {info[histograms][cores] - A unicode histogram representation of the percentage of all system CPU cores
        # ^ The alternate format label for the widget. Accepts: string
      label_alt: "\uf200 {info[histograms][cpu_percent]}"
      update_interval: 1000
        # ^ The interval at which the CPU widget will update. Accepts: positive integer
      histogram_icons:
        # ^ The unicode characters used to represent CPU the frequency/percentage histogram data. Accepts: list of 9 unicode strings.
        # ^ Note: the below unicode characters require the following graph bars font: https://github.com/and3rson/graph-bars-font
        - ' ' # 0%
        - '\u2581' # 10%
        - '\u2582' # 20%
        - '\u2583' # 30%
        - '\u2584' # 40%
        - '\u2585' # 50%
        - '\u2586' # 60%
        - '\u2587' # 70%
        - '\u2588' # 80%+
      histogram_num_columns: 10
          # ^ The number of columns displayed for each generated histogram. Accepts: positive integer between 0 and 128.
      # callbacks:
        # on_left: "toggle_label"
        # on_middle: "do_nothing"
        # on_right: "do_nothing"


  memory-widget:
    type: "yasb.memory.MemoryWidget"
    options:
      label: "\uf538 {virtual_mem_free}/{virtual_mem_total}"
        # ^ The format label for the widget. Accepts: string containing any of the below format options:
          # {virtual_mem_free}    : The amount of free virtual memory
          # {virtual_mem_percent} : The percentage of free virtual memory
          # {virtual_mem_total}   : The amount of total virtual memory
          # {virtual_mem_avail}   : The amount of total available virtual memory
          # {swap_mem_free}       : The amount of free swap memory
          # {swap_mem_percent}    : The percentage of free swal memory
          # {swap_mem_total}      : The amount of total swap memory
      label_alt:  "\uf538 VIRT: {virtual_mem_percent}% SWAP: {swap_mem_percent}%"
        # ^ The alternate format label for the widget. Accepts: string containing any of the above format options
      update_interval: 1000
        # ^ The interval at which the widget will update itself. Accepts: positive integer (number of milliseconds)
      memory_thresholds: # All options accept a positive integer between 0 and 100
        low: 25
        # ^ The percentage at which the .status-low CSS class is applied. Accepts integer from 0 to 100
        medium: 50
        # ^ The percentage at which the .status-medium CSS class is applied. Accepts integer from 0 to 100
        high: 90
        # ^ The percentage at which the .status-high CSS class is applied. Accepts integer from 0 to 100
      # callbacks:
        # on_left: "toggle_label"
        # on_middle: "do_nothing"
        # on_right: "exec cmd /c Taskmgr"

  battery-widget:
    type: "yasb.battery.BatteryWidget"
    options:
      time_remaining_natural: true
      label: "{percent}% {icon}"
        # ^ The format label for the widget. Accepts: string containing any of the below format options
        #   {percent}        : The current battery percentage
        #   {time_remaining} : The estimated battery duration remaining
        #   {is_charging}    : The boolean charging status
        #   {icon}           : The battery status icon
      label_alt: "remaining: {time_remaining}"
        # ^ The alternate format label for the widget. Accepts: string
      update_interval: 1000
        # ^ The interval at which the widget will update itself. Accepts: positive integer
      charging_options:
        icon_format: "{charging_icon}"
          # ^ The charging icon position relative to the battery icon. Accepts string containing {charging_icon} and {icon}
        blink_charging_icon: True
          # ^ Specify if the charging icon should blink at each update interval period
      status_thresholds:
        critical: 10
          # ^ The percentage at which the .status-critical CSS class is applied Accepts: integer from 0 to 100
        low: 25
          # ^ The max percentage at which the .status-low CSS class is applied Accepts: integer from 0 to 100
        medium: 75
          # ^ The max percentage at which the .status-medium CSS class is applied Accepts: integer from 0 to 100
        high: 95
          # ^ The max percentage at which the .status-high CSS class is applied Accepts: integer from 0 to 100
        full: 100
          # ^ The max percentage at which the .status-full CSS class is applied. Accepts: integer from 0 to 100
      status_icons:
        icon_charging: "\uf0e7"
          # ^ The icon shown when the battery is charging. Accepts: string
        icon_critical: "\uf244"
          # ^ The icon shown when critical battery status threshold is reached
        icon_low: "\uf243"
          # ^ The icon shown when low battery status threshold is reached
        icon_medium: "\uf242"
          # ^ The icon shown when medium status threshold is reached
        icon_high: "\uf241"
          # ^ The icon shown when high status threshold is reached
        icon_full: "\uf240"
          # ^ The icon shown when full status threshold is reached
      callbacks:
        on_left: "toggle_label" # toggles between the clock and alternate clock labels
        on_middle: "do_nothing"
        on_right: "do_nothing"

  active-window-widget:
    type: "yasb.active_window.ActiveWindowWidget"
    options:
      label: "{win[process][name]}"
      #   ^ The format label for the widget. Accepts: string containing any of the below {win} format options
      #     win[hwnd] - the hwnd of the active window
      #     win[event] - the event which focused the active window
      #     win[title] - the active window title
      #     win[class_name] - the active window class_name
      #     win[monitor_hwnd] - the hwnd of the monitor displaying the application
      #     win[monitor_info][rect][x,y,width,height] - the dimensions of the screen
      #     win[monitor_info][rect_work_area][x,y,width,height] - the dimensions of the screen work area
      #     win[monitor_info][flags] - the flags assocaited with the screen
      #     win[monitor_info][device] - the device name of the screen
      #     win[process][name] - the name of the active window process
      #     win[process][pid] - the process id of the parent process
      #     win[process][ppid] - the parent process idexpected <block end>, but found '<block mapping start>'
      #     win[process][cpu_num] - the number of CPUs being used
      #     win[process][cpu_percent] - the window cpu usage in percent
      #     win[process][mem_percent] - the window memory usage in percent
      #     win[process][num_threads] - the windows number of threads in use
      #     win[process][username] - the username of the user executing the window process
      #     win[process][status] - the status of the process
      label_alt: "{win[process][pid]}"
        # ^ The format label for the widget. Accepts: string containing any of the above {win} format options
      label_no_window: ""
        # ^ The label shown when no window is active. Accepts: string
      max_length: 30
        # ^ The max length of the active window label. Accepts: positive integer
      max_length_ellipsis: "..."
        # ^ The ellipsis string used when truncating the window label if it exceeds the max length. Accepts: string
      monitor_exclusive: true
        # ^ Specifies if the active window title should be shown on all bars, or exclusively for the bars on the active window screen
      # ignore_window:
        # class: []
          # ^ A list of class_names the widget should ignore. Accepts: list of strings
        # process: []
          # ^ A list of process names the widget should ignore. Accepts: list of strings
        # titles: []
          # ^ A list of titles the widget should ignore. Accepts: list of strings
      callbacks:
        on_left: "toggle_label" # toggles between the clock and alternate clock labels
        on_middle: "do_nothing"
        on_right: "do_nothing"

  komorebi_workspaces:
    type: "komorebi.workspaces.WorkspaceWidget"
    options:
      label_offline: "Komorebi Offline"
        # ^ The message shown when YASB cannot connect with the komorebi window manager. Accepts: string
      label_workspace_btn: "{index}"
        # ^ The label format for all workspace buttons. Accepts: string.
        #   Format options: {name}, {index}, {monitor_index}
      label_default_name: "{index}"
        # ^ The default name value used if no workspace name is set via Komorebi. Accepts: string
        #   Format options: {index}, {monitor_index}
      label_zero_index: false
        # ^ Specifies if the workspace and monitor index values should be zero-indexed. Accepts: boolean
      hide_empty_workspaces: true
        # ^ Specifies if empty workspaces should be shown in the list of komorebi workspaces. Accepts: boolean

  komorebi_active_layout:
    type: "komorebi.active_layout.ActiveLayoutWidget"
    options:
      hide_if_offline: true
        # ^ Specifies if the active layout label should be shown when komorebi is offline
      label: "{icon}"
        # ^ The label shown when an active layout change is detected. Accepts: string containing format options {icon} and {layout_name}
      layout_icons:
        bsp: "[\\]"
        columns: "[||]"
        rows: "[---]"
        vertical_stack: "[]="
        horizontal_stack: "H/="
        ultrawide_vertical_stack: "[|]="
        monocle: "[M]"
        maximised: "[X]"
        floating: "><>"
        paused: "|P|"
      callbacks:
        # ^ callback options include:
          # "next_layout" - Cycles the next layout for the active workspace
          # "prev_layout" - Cycles the previous layout for the active workspace
          # "flip_layout" - Flips layout of active workspace. Works for BSP tiling mode only
          # "toggle_tiling" - Toggles tiling of all windows for the active workspace
          # "toggle_float" - Toggles floating of active window for current workspace
          # "toggle_monocle" - Toggles monocle mode for active window for current workspace
          # "toggle_maximise" -  Toggles maximising active window for current workspace
          # "toggle_pause" - Toggles pausing komorebi on/off for all workspaces
        on_left: "next_layout"
        on_middle: "toggle_monocle"
        on_right: "prev_layout"
  
  # Some custom widgets

  explorer_button:
    type: "yasb.custom.CustomWidget"
    options:
      label: "\uf07c"
      label_alt: "Explorer"
      class_name: "explorer-widget"
      exec_options:
        run_once: true
      callbacks:
        on_left: "exec explorer.exe"
        on_right: "toggle_label"

  ip_info:
    type: "yasb.custom.CustomWidget"
    options:
      label: "\u25B6 {data[city]} {data[region]}"
      label_alt: "\uf3c5 {data[ip]} [{data[country]}]"
      class_name: "ip-info-widget"
      exec_options:
        run_cmd: "curl.exe https://ipinfo.io"
        run_interval: 120000                                        # every 5 minutes
        return_format: "json"
      callbacks:
        on_left: "toggle_label"
        on_middle: "exec cmd /c ncpa.cpl"                           # open network settings
        on_right: "exec cmd /c start https://ipinfo.io/{data[ip]} " # open ipinfo in browser

  weather-widget:
    type: "yasb.custom.CustomWidget"
    options:
      class_name: 'my-weather-widget'
        # ^ The CSS class name of the custom widget. Accepts: string. Required field.
      label: "\uf0c2  {data[data][1][wendu]}\u00b0c"
        # ^ The format label for the custom widget. Accepts: string containing {data} format options. Required field.
        # If the command executed returns a JSON structure,
        # the JSON object can be used within the format label using the python dictionary string formatting syntax.
      label_alt: "\uf0c2 {data[data][1][tianqi]}"
        # ^ The alternate format label for the clock. Accepts: string containing {data} format options. Required field.
      # label_max_length: None
        # ^ The maximum length of the label. Accepts: positive integer
      exec_options:
        run_cmd: 'curl -s https://v.api.aa1.cn/api/api-tianqi-3/index.php?msg=nanjing^&type=8'
          # ^ The command to be executed by the custom widget's timer event. Accepts: string of command-line arguments.
        run_once: false
          # ^ Specifies that the custom widget's timer event only run once on start-up. Accepts: boolean
        run_interval: 30000
          # ^ The duration in which the custom widget's timer event will fire. Accepts: positive integer (milliseconds)
        return_format: "json"
          # ^ The format of the data written to stdout by the command-line program. Accepts: strings 'string' or 'json'
      callbacks:
        on_left: "toggle_label" # toggles between the clock and alternate clock labels
        on_middle: "do_nothing"
        on_right: "do_nothing"

  wakatime-widget:
    type: "yasb.custom.CustomWidget"
    options:
      class_name: 'wakatime-widget'
        # ^ The CSS class name of the custom widget. Accepts: string. Required field.
      label: "\u2328 {data[data][1][grand_total][text]}"
        # ^ The format label for the custom widget. Accepts: string containing {data} format options. Required field.
        # If the command executed returns a JSON structure,
        # the JSON object can be used within the format label using the python dictionary string formatting syntax.
      label_alt: "\u2328 {data[data][1][languages][0][name]}"
        # ^ The alternate format label for the clock. Accepts: string containing {data} format options. Required field.
      # label_max_length: None
        # ^ The maximum length of the label. Accepts: positive integer
        
      exec_options:
        run_cmd: 'pwsh -NoProfile C:\Users\jyf\.yasb\wakatime.ps1'
          # ^ The command to be executed by the custom widget's timer event. Accepts: string of command-line arguments.
        run_once: false
          # ^ Specifies that the custom widget's timer event only run once on start-up. Accepts: boolean
        run_interval: 600000
          # ^ The duration in which the custom widget's timer event will fire. Accepts: positive integer (milliseconds)
        return_format: "json"
          # ^ The format of the data written to stdout by the command-line program. Accepts: strings 'string' or 'json'
      callbacks:
        on_left: "toggle_label" # toggles between the clock and alternate clock labels
        on_middle: "do_nothing"
        on_right: "do_nothing"
